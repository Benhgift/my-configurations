#!/bin/zsh
# ---------------------------------------------------------------
alias gd="git diff"
alias gs="git status"
alias gt="git tag"
alias grso="git remote show origin"
alias gcl="git config --list"
alias gclone="sh $HOME/.myconfigurations/software/git/shell-scripts/clone.sh"
alias gpot="git push origin --tags"
alias gpt="git push --tags"
alias gl="git log --show-notes"
alias glt="git log --graph --oneline --all"
alias gltp="git log --graph --all --decorate"
alias gfi="git flow init"
alias gf="git flow"
alias gfh="git flow help"

function grpo() {
  git pull;
  git remote prune origin;
  git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d;
}

function gp() {
  git pull;
  git status;
}

function gc() {
  git add . -A;
  git commit -m "$*";
  git push;
  git status;
}

function gps() {
  git push;
  git status;
}

function gcb() {
  git pull;
  git checkout -b "$*";
  git push -u origin "$*";
  git push --set-upstream origin "$*";
  git status;
}

function gck() {
  git checkout "$*";
  git pull;
  git status;
}

function gm() {
  git pull;
  git merge "$*" --no-ff;
  git push;
  git status;
}

function gmdb() {
  git pull
  git merge "$*" --no-ff;
  git push;
  git push --delete origin "$*";
  git remote prune origin
  git branch -D "$*";
  git status;
}

function gdbf() {
  git pull
  git push --delete origin "$*";
  git remote prune origin
  git branch -D "$*";
  git status;
}

function gmt() {
  git pull;
  git merge "$*" -X theirs;
  git push;
  git status;
}

function gdb() {
  git branch -D "$*";
  git remote prune origin
  git status;
}

function gdbf() {
  git branch -D "$*";
  git push --delete origin "$*";
  git remote prune origin
  git status;
}

function gpsvn() {
  find . -name .svn  -type d -print0 |xargs -0 rm -rf
}

function gk() {touch .keep}

function gkf() {
  mkdir "$*";
  touch "$*/.keep";
}

function gcmd() {
  touch readme.md;
  open readme.md;
}

function gdt() {
  git tag -d "$*";
  git push origin :refs/tags/"$*";
}

function gfcb() {
  param1=$1:l
  param2=$2:l
  echo "git subcommand:" $param1
  echo "branch name:" $param2
  spacer
  git flow $param1 start $param2
  git flow $param1 publish $param2
}

function gfmb() {
  param1=$1:l
  param2=$2:l
  echo "git subcommand:" $param1
  echo "branch name:" $param2
  spacer
  git flow $param1 finish $param2
}

# ---------------------------------------------------------------

githelp () {
  echo
  echo "  gfmb         = git flow subcommand finish branch :: param 1= subcommand param 2=branch"
  echo "  gfcb         = git flow subcommand start branch :: param 1= subcommand param 2=branch"
  echo "  gfi          = setup code repo using gitflow"
  echo "  gfh          = git flow help"
  echo "  gf           = git flow"
  echo "---------------------------------------------------------------"
  echo "  gcm          = git commit, push, and status"
  echo "  gmdb         = git merge and delete branch everywhere"
  echo "  gp           = git pull"
  echo "  gd           = git diff"
  echo "  grpo         = git prune remote and locals"
  echo "  grso         = git remote show origin"
  echo "  gcl          = git config --list"
  echo "  gm           = git pull, merge branch, push, status"
  echo "  gmt          = git merge theirs, push, status"
  echo "  gcb          = git pull, create branch, push branch to git"
  echo "  gck          = git checkout, pull, status"
  echo "  gdbf         = git delete local and remote branch"
  echo "  gdb          = git delete local branch"
  echo "  gfc          = git fix last commit message"
  echo "  gpsvn        = find and delete .svn files"
  echo "  gclone       = run hough custom clone script"
  echo "  gs           = git status"
  echo "  gt           = git tag"
  echo "  gpot         = git push origin --tags"
  echo "  gpt          = git push --tags"
  echo "  gdt          = git deploy tags"
  echo "  gl           = git log --show-notes"
  echo "  glt          = git log --graph --oneline --all"
  echo "  gltp         = git log --graph --all --decorate"
  echo "---------------------------------------------------------------"
  echo "  gk           = create git .keep file"
  echo "  gkf          = create folder with .keep file"
  echo "  gmd          = create readme markdown file"
  echo
}
